How did viewing a diff between two versions of a file help you see the bug that was introduced?
	
	The lines that weren't changed were taken out so I would have less to read through.
	This makes it easier and quicker to find the bug.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    You can go back and find things that worked or didn't work when troubleshooting or improving
    your program.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros: Cuts down on the number of versions to look through and you can annotate each version.
        you can commit at logical points rather than in the middle of writing a line
    Cons: You may forget to save versions or save versions that had too many changes. Automatic 
        saving cuts down on some work maybe. Commits may not occur at logical stopping points.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Some version control systems have more sophisticated functions depending on the purpose. Git for
    coding, Google docs for documents.

How can you use the commands git log and git diff to view the history of files?

    git log: shows the commit history with annotation date etc. provides a code
    git diff: compares two versions and shows the changes between the versions.

How might using version control make you more confident to make changes that
could break something?

    You know you have a backup saved with working code so you can risk making changes.

Now that you have your workspace set up, what do you want to try using Git for?

    Making a webpage.